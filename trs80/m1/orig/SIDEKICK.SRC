;       SIDEKICK fuer TRS80-Kompatible mit Helmuts Banker;       im Dez. 1986 von Gerald Schroeder;       nach einer Idee von Arnulf Sopp;       Angepasst fuer Alpha Technology SuperMem und mit;       Computer-Anzeige im Nov. 2024 von Jens Guenther        ORG     5300h           ;Stack ab hier abwaerts!port    EQU     043h            ;I/O-Port fuer SuperMemstart   LD      (spbuf),SP      ;SP retten        LD      HL,retpro       ;Rueckkehr-Adresse (bei 1.        PUSH    HL              ; Aufruf Comp. 1-3)        LD      B,4             ;Stack vorbereitenloop1   PUSH    AF        DJNZ    loop1        LD      (rettsp),SP     ;retten fuer Comp. 1-3        LD      A,1             ;Bank 1        DI        OUT     (port),A        ;einschalten        LD      HL,schalt       ;Umschalt-Routine        LD      DE,schalt-diff  ;in Bank 1        LD      BC,ende-schalt        LDIR        XOR     A        OUT     (port),A        ;wieder Bank 0        LD      HL,umleit       ;Umleitung in Interrupt-        LD      DE,umleit-diff1 ;Routine anlegen        LD      BC,ende1-umleit        LDIR        LD      HL,zuruck       ;Ruecksprung        LD      DE,zuruck-diff2 ;in SYS0 anlegen        LD      BC,ende2-zuruck        LDIR        LD      SP,start        ;SP neu setzen        LD      B,3             ;drei Computerloop2   CALL    copy            ;in die Banks        DJNZ    loop2        EI        LD      SP,0000         ;SP zurueckspbuf   EQU     $-2retpro  RET                     ;ab;       kopiert oberen und unteren Teil in Bankscopy    PUSH    BC              ;Zaehler retten        LD      A,B             ;als Bank-Nr.        OUT     (port),A        ;fuer unteren Teil        LD      DE,8000h+3000h  ;Ziel = 0b000h        LD      B,50h           ;Laenge = 5000h        LD      C,E        LD      H,30h           ;Anfang 3000h        LD      L,E        LDIR                    ;(3000-7fff)=>(b000-ffff)        ADD     A,3             ;fuer oberen Teil        EX      AF,AF'          ;retten        LD      D,60h           ;Buffer: 6000h-6100hloop3   INC     B               ;ein Sektor        XOR     A               ;Bank 0        OUT     (port),A        ;ein        LDIR                    ;Sektor aus 0 in Buffer        DEC     D               ;Sektor-Zeiger auf 6000h        LD      A,H             ;Quelle- als Zielzeiger        LD      H,D        LD      D,A        DEC     D        INC     B        EX      AF,AF'          ;Bank-Nr. zurueck        OUT     (port),A        ;anwaehlen        EX      AF,AF'          ;wieder rettten        LDIR                    ;aus Buffer in Bank        DEC     H               ;Buffer auf 6000h        LD      A,D             ;und wieder tauschen        LD      D,H        LD      H,A        OR      L               ;schon ueber ffffh hinaus?        JR      NZ,loop3        ;nein        OUT     (port),A        ;ja, Bank 0 ein        POP     BC              ;Zaehler zurueck        RET;       Umleitung in der Interrupt-Routinediff1   EQU     $-45f6humleit  LD      A,1             ;Bank 1        OUT     (port),A        ;ein        JP      schalt-diff     ;und anspringenende1   EQU     $;       Rueckkehr-Routinediff2   EQU     $-4053hzuruck  OUT     (port),A        ;Bank x fuer oben an        JP      45fdh           ;weiterende2   EQU     $;       Schaltroutine in Bank 1;       Ansprung von Interrupt-Routine ausdiff    EQU     $-8000hschalt  LD      HL,3880h        ;Tast.-Zeile        BIT     0,(HL)          ;SHIFT?        JR      Z,goon3         ;nein, ab        SRL     L               ;Tast.zeile 3840h        BIT     4,(HL)          ;Down-Arrow?        JR      Z,goon3         ;nein, ab        SRL     L        SRL     L               ;Tast.zeile 3810h        LD      A,(HL)        AND     0fh             ;Taste 0 bis 3?        JR      Z,goon3         ;nein, ab        LD      L,A             ;retten        XOR     A               ;Zaehler=0goon1   INC     A               ;+1        SRL     L               ;solange        JR      NC,goon1        ;bis Taste erreicht        DEC     A               ;Zaehler korrigieren        LD      (rettsp),SP     ;SP retten        LD      DE,goon4-diff   ;Rueckkehradresse        JR      spsuch          ;neuen SP berechnengoon4   PUSH    IX              ;Register dieses Comp.        PUSH    IY              ;retten        EX      AF,AF'        EXX        PUSH    AF        PUSH    BC        PUSH    DE        PUSH    HL        LD      SP,ende-diff+150 ;zeitweilig neu        EX      AF,AF'          ;Comp.-Nr. zurueck        CP      0               ;schon eingeschaltet?momba   EQU     $-1        JR      Z,abgang        ;ja        LD      (banku-diff),A  ;dort unterer Teil        OR      A               ;Comp. 0?        JR      Z,goon2         ;ja, oben = Bank 0        ADD     A,3             ;sonst oben = u +3goon2   LD      (banko-diff),A  ;Bank oberer Teil        LD      A,(momba-diff)  ;Comp. 0 eingeschaltet?        OR      A        CALL    NZ,tausch-diff  ;nein, Comp. 0 holen        LD      A,0             ;Bank unterer Teilbanku   EQU     $-1        LD      (momba-diff),A  ;sichern: mom. Comp.        OR      A               ;falls nicht 0:        CALL    NZ,tausch-diff  ;Computer holenabgang  LD      DE,goon5-diff        JR      spsuchgoon5   LD      B,12            ;SP korrigierenab1     DEC     SP        DJNZ    ab1                                ;Register des        POP     HL              ;Computers zurueck        POP     DE        POP     BC        POP     AF        EXX        EX      AF,AF'        POP     IY        POP     IX        LD      SP,(rettsp)     ;SP restaurierengoon3   LD      A,(momba-diff)  ;aktueller Comp.        OR      30h             ;Nr. zu ASCII        LD      (3c3fh),A       ;rechts oben anzeigen        LD      A,(37ech)       ;urspr. Int.-rout.        LD      A,(37e0h)        RLCA        LD      A,0             ;Bank-Nr. fuer oberer Teilbanko   EQU     $-1        JP      zuruck-diff2    ;nach SYS0 fuer Abgang;       Unterprogramm: Stack-Pos. fuer geg. Comp. A;       berechnenspsuch  LD      L,A             ;Nr. nach L        LD      H,0        LD      SP,ende-diff+20 ;Stack-Offset        LD      B,5             ;+32*Comp.-Nr.sps1    SLA     L        DJNZ    sps1        ADD     HL,SP        LD      SP,HL           ;SP in Bank 1 setzen        EX      DE,HL           ;Rueckspr.adr. nach HL        JP      (HL)            ;und ab;       Unterprogramm Tausch:;       vertauscht unteren Teil von Computer 0 mit dem;       eines der drei anderen Computertausch  LD      (bankx1-diff),A ;gew. Bank-Nr. sichern        LD      (bankx2-diff),A        LD      (bankx3-diff),A        LD      HL,anf-diff3    ;Bereich Tausch-Rout.        PUSH    HL              ;retten        LD      DE,0a000h       ;Buffer fuer Original        LD      BC,0200h        LDIR                    ;Orig.-Code retten        POP     DE              ;7e00h        PUSH    DE        LD      HL,anf-diff     ;Routinen zum Tauschen        LD      BC,ende-anf        LDIR                    ;in die untere Haelfte                                ;bei 7e00h        LD      (stack-diff),SP ;SP retten        LD      SP,7f00h        ;auch nach unten        LD      HL,0fe00h       ;7e00h aus Bank x        LD      DE,7f00h        ;Buffer        LD      BC,9f00h        ;MSB (Buffer in Bank) -1        CALL    anf-diff3       ;Aufruf Tausch-Rout.        LD      SP,0000         ;SP zurueckstack   EQU     $-2        POP     DE              ;7e00 zurueck        LD      H,9fh           ;von 9f00 aus        INC     B               ;BC=0200h        LDIR                    ;7e00-7fff neu fuellen        RETdiff3   EQU     $-7e00hanf     PUSH    BC              ;9f00 (x-1) auf Stack        PUSH    DE              ;7e00 (z)    "    "        LD      B,1        LD      A,2             ;2 Durchlaeufe;7e00-7fff tauschenloopp   EX      AF,AF'          ;Zaehler retten        LD      A,0bankx1  EQU     $-1        OUT     (port),A        POP     DE              ;z zurueck        POP     AF              ;(x-1) zurueck        PUSH    HL              ;y retten        PUSH    AF              ;(x-1) retten        PUSH    DE              ;z retten        LDIR                    ;y -> z, Bank x -> Buffer        INC     B        LD      A,1        OUT     (port),A        POP     HL              ;z zurueck        POP     DE              ;(x-1) zurueck        PUSH    HL              ;z retten        LDIR                    ;z -> (x-1)        INC     B               ; Buffer -> Bank 1        LD      H,D             ;x        POP     DE              ;z zurueck        PUSH    HL              ;x retten        PUSH    DE              ;z retten        LDIR                    ;x -> z, Bank 1 -> Buffer        INC     B               ; (Original-Code)        LD      A,0bankx2  EQU     $-1        OUT     (port),A        POP     HL              ;z zurueck        POP     AF              ;x zurueck        POP     DE              ;y zurueck        PUSH    AF              ;x retten        PUSH    HL              ;z retten        LDIR                    ;z -> y, Buffer -> Bank x        INC     B               ; (Orig. in Bank x)        LD      H,D             ;(y+1)        EX      AF,AF'        DEC     A        JR      NZ,loopp;Stack: (x+1),z        POP     DE              ;Buffer z        POP     AF              ;(x+1) weg        LD      H,30h           ;Anfang mit unten (3000h)        LD      A,0bankx3  EQU     $-1        OUT     (port),A        ;Bank x einloop    PUSH    DE              ;"Buffer z" retten        PUSH    HL              ;"von y" retten        LDIR                    ;1.: Sektor in Buffer        POP     DE              ;"nach y" zurueck        LD      H,D             ;"von z" (aus Bank)        SET     7,H             ;deshalb: immer >= 8000h        PUSH    HL              ;retten        INC     B               ;ein Sektor        LDIR                    ;2.: aus Bank nach unten        POP     DE              ;"nach x" (Bank)        POP     HL              ;"von z" (Buffer)        INC     B               ;ein Sektor        LDIR                    ;aus Buffer in Bank        INC     B               ;ein Sektor        DEC     H               ;Buffer bleibt        LD      A,D             ;"von y":        AND     7fh             ;immer unter 8000h        LD      D,H             ;Buffer in DE        LD      H,A             ;"von y" in HL        CP      37h             ;I/O-Bereich?        JR      NZ,lop          ;nein, weiter        INC     H               ;ja, ueberspringenlop     CP      7eh             ;=fertig?        JR      NZ,loop         ;weiter, wenn <> 7e00        LD      A,1             ;Bank 1        OUT     (port),A        ;wieder ein        RET                     ;fertigende    EQU     $rettsp  EQU     4058h        END     start